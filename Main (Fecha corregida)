#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>



struct Materias 
{
	int clave, semestre;
	char nombre[20];	
};

struct Fecha
{
    int dia, mes, anio;
};

struct Grupos
{
	int claveGrupo, semestre, numEmpleado; 
	char periodoGrupo[20];
	struct Materias claveMateria;
	struct Fecha fh;
};

struct Inscripcion 
{
    int folio, grupo, matricula;
    char fecha[20];
    struct Grupos grupoIns;
};

struct Direccion
{
    char calle[50], colonia[50], municipio[50], estado[50];
    int numero;
};

struct Alumno
{
    int matricula, semestre;
    float promedios[10];
    float promedio;
    char nombre[100], carrera[50], telefono[11], correo[100];
    struct Fecha nacimiento;
    struct Direccion direccion;
};

struct Profesor
{
    int numEmpleado, totalMaterias, coordinacion;
    char nombre[100], correo[100], telefono[11], clavesMaterias[10][20];
    struct Fecha nacimiento;
    struct Direccion direccion;
};




main()
{
	int opcion;
	
	struct Alumno alumnos[20];
	int totalAlumnos = 0;
    
    	struct Profesor profesores[10];
    	int totalProfesores;
               
    	struct Materias mt[10];
    	int totalMaterias;
    
    	struct Grupos gp[50];
    
	
	do
	{
        	printf("\nMenu principal \n");
        	printf("1. Alumnos\n");
        	printf("2. Profesores\n");
        	printf("3. Materias\n");
		printf("4. Grupo\n");
	        printf("5. Inscripcion\n");
	        printf("6. Actualizar promedio\n");
	        printf("7. Reportes\n");
	        printf("8. Salir\n");
        
       		printf("Ingrese la opcion deseada: ");
       		scanf("%d", &opcion);	
        
	        switch (opcion)
		{
	            case 1:
	                //Funcion alumnos
	                if (totalAlumnos < 20)
	                    agregarAlumno(&alumnos[totalAlumnos++]);
	                else
	                    printf("Limite de alumnos alcanzado.\n");
	                break;
	           
	            case 2:
	               //Funcion profesores
	               if (totalProfesores < 10)
	                    agregarProfesor(&profesores[totalProfesores++]);
	                else
	                    printf("Limite de profesores alcanzado.\n");
	                break;
	                
	            case 3:
	            	//Funcion materias
					if(totalMaterias < 10)
	            		agregarMaterias(&mt[totalMaterias++]);
	            	else
	            		printf("Limite de materias alcanzado");
	                break;
	                
	            case 4:
	               //Funcion grupo
	                break;
	                
	            case 5:
	               //Funcion Inscripciones
	                break;
	        	case 6:
	               //funcion promedio
	                break;
	            case 7:
	               //Funcion reportes
	                break;
	            
				case 8:
	               //Salir
	                break;
	            
	            default:
	                printf("Por favor ingrese una opcion valida.\n");
	        }
    	} while (opcion != 0);
}


char carreras[][50] = {
    "Actuaria",
    "Ciencias Computacionales",
    "Fisica",
    "Multimedia y Animacion Digital",
    "Matematicas",
    "Seguridad"
};

char materiasDisponibles[][10] = {
    "MAT101", "FIS102", "COM103", "ACT104", "SEG105",
    "ANI106", "MAT201", "FIS202", "COM203", "ACT204"
};


int validarCarrera(char *carrera);
int esBisiesto(int anio);
int validarFecha(struct Fecha f);
int validarCorreo(char *correo);
int validarTelefono(char *telefono);
int validarMateria(char *clave);

void agregarAlumno(struct Alumno *a);
void agregarProfesor(struct Profesor *p);


int validarCarrera(char *carrera)
{
    int i;
	for (i = 0; i < 6; i++)
    	{
        	if (strcmp(carrera, carreras[i]) == 0)
            	return 1;
    	}
    return 0;
}

int esBisiesto(int anio)
{
	return (anio % 4 == 0 && anio % 100 != 0);
}

int validarFecha(struct Fecha f)
{
    time_t t = time(NULL);
    struct tm *ahora = localtime(&t);
    int dia = ahora->tm_mday;
    int mes = ahora->tm_mon + 1;
    int anio = ahora->tm_year + 1900;

    struct tm *actual = localtime(&t);
    int anioActual = actual->tm_year + 1900;
    int mesActual = actual->tm_mon + 1;
    int diaActual = actual->tm_mday;

    if (a > anioActual)
    {
        printf("Fecha inválida: el año no puede ser mayor al actual (%d).\n", anioActual);
        return 0;
    }

    if (m < 1 || m > 12)
    {
        printf("Fecha inválida: el mes debe estar entre 1 y 12.\n");
        return 0;
    }

    int diasMes[] = {31, (esBisiesto(a) ? 29 : 28), 31, 30, 31, 30,
                     31, 31, 30, 31, 30, 31};

    if (d < 1 || d > diasMes[m - 1])
    {
        printf("Fecha inválida: el día %d no es válido para el mes %d en el año %d.\n", d, m, a);
        return 0;
    }

    if (a == anioActual && m == mesActual && d > diaActual)
    {
        printf("Fecha inválida: no puede ingresar una fecha futura.\n");
        return 0;
    }

    if (a == anioActual && m > mesActual)
    {
        printf("Fecha inválida: no puede ingresar una fecha futura.\n");
        return 0;
    }

    printf("Fecha válida: %02d/%02d/%04d\n", d, m, a);
    return 1;
}

int validarCorreo(char *correo)
{
    return (strstr(correo, "@") != NULL && (strstr(correo, ".com") || strstr(correo, ".mx")));
}
int validarTelefono(char *telefono)
{
    return strlen(telefono) == 10 && strspn(telefono, "0123456789") == 10;
}
int validarMateria(char *clave)
{
    int i;
	for (i = 0; i < 10; i++)
    	{
        	if (strcmp(clave, materiasDisponibles[i]) == 0)
            	return 1;
    	}
    	return 0;
}


void agregarAlumno(struct Alumno *a)
{
	int i;
	char continuar;

	do
	{
		do
		{
			printf("Ingresar matricula: ");
			scanf("%d", &a->matricula);

			if(a->matricula <= 0)
				printf("Marticula invalida.");
		} while (a->matricula <= 0);

		do
		{
			printf("Ingrese su nombre: ");
		        scanf(" %[^\n]", a->nombre);

			if(strlen(a->nombre) == 0)
				printf("Nombre invalido.");
		} while (strlen(a->nombre == 0));

		do
		{
		        printf("Ingrese su carrera: ");
		        fgets(a->carrera, 50, stdin); strtok(a->carrera, "\n");
		} while (!validarCarrera(a->carrera));

		do
		{
		        printf("Ingrese su semestre: ");
		        scanf("%d", &a->semestre);

			if(a->semestre < 1 || a->semestre > 10)
				printf("El semestre ingresado no existe.");
		} while (a->semestre < 1 || a->semestre > 10);

		for (i = 0; i < a->semestre; i++)
		{
			do
		        {
		            	printf("Ingrese su promedio del semestre %d: ", i + 1);
		            	scanf("%f", &a->promedio);

			    	if(a->promedio < 0 || a->promedio > 100)
				    	printf("Promedio invalido.");
		        } while (a->promedio < 0 || a->promedio > 100);
		}

		do
		{
			printf("Ingrese su fecha de nacimiento: ");
			scanf("%d %d %d", &p->nacimiento->dia, &p->nacimiento->mes, &p->nacimiento->anio);
		} while (!fechaValida(p->nacimiento->dia, p->nacimiento->mes, p->nacimiento->anio));

		do
		{
		        printf("Ingresar su numero de telefono: ");
		        scanf("%s", a->telefono);
		} while (!validarTelefono(a->telefono));

		do
		{
		        printf("Ingresar su correo electronico: ");
		        scanf("%s", a->correo);
		} while (!validarCorreo(a->correo));

		printf("---\nIngresar dirección---\n");
	        printf("Calle: ");
	        scanf(" %[^\n]", p->direccion->calle);
	        printf("Numero: ");
	        scanf("%d", &p->direccion->numero);
	        printf("Colonia: ");
	        scanf(" %[^\n]", p->direccion->colonia);
	        printf("Municipio: ");
	        scanf(" %[^\n]", p->direccion->municipio);
	        printf("Estado: ");
	        scanf(" %[^\n]", p->direccion->estado);

		printf("Alumno agregado correctamente. Desea agregar otro alumno? (s/n): \n");
		scanf(" %c", &continuar);
	} while (continuar == 's' || continuar == 'S');
}


void agregarProfesor(struct Profesor *p) 
{
	int i;
	char continuar;

	do
	{
		do
		{
			printf("Numero de empleado: ");
			scanf("%d", &p->numEmpleado);

			if(p->numEmpleado <= 0)
			printf("El numero ingresado no existe.");
		} while (p->numEmpleado <= 0);

		do
		{
			printf("Ingresar su nombre: ");
			scanf(" %[^\n]", p->nombre);

			if(strlen(p->nombre) == 0)
				printf("Nombre invalido.");
		} while (strlen(p->nombre) == 0);
	
		do
		{
			printf("Ingresar su coordinacion (1-6): ");
			scanf("%d", &p->coordinacion);

			if(p->coordinacion < 1 || p->coordinacion > 6)
				printf("La coordinacion ingresada no existe.");
		} while (p->coordinacion < 1 || p->coordinacion > 6);

		do
		{
			printf("Ingrese su fecha de nacimiento: ");
			scanf("%d %d %d", &p->nacimiento->dia, &p->nacimiento->mes, &p->nacimiento->anio);
		} while (!fechaValida(p->nacimiento->dia, p->nacimiento->mes, p->nacimiento->anio));

		do
		{
			printf("Ingresar su numero de telefono: ");
			scanf("%s", p->telefono);
		} while (!validarTelefono(p->telefono));

	    	do
	    	{
	        	printf("Ingresar su correo electronico: ");
	        	scanf("%s", p->correo);
	    	} while (!validarCorreo(p->correo));

	    	printf("--- Ingresar dirección ---\n");
	        printf("Calle: ");
	        scanf(" %[^\n]", p->direccion->calle);
	        printf("Numero: ");
	        scanf("%d", &p->direccion->numero);
	        printf("Colonia: ");
	        scanf(" %[^\n]", p->direccion->colonia);
	        printf("Municipio: ");
	        scanf(" %[^\n]", p->direccion->municipio);
	        printf("Estado: ");
	        scanf(" %[^\n]", p->direccion->estado);

	    	do
	    	{
	        	printf("¿Cuantas materias imparte? (máximo 10): ");
	        	scanf("%d", &p->totalMaterias);
	    	} while (p->totalMaterias < 0 || p->totalMaterias > 10);

	    	for (i = 0; i < p->totalMaterias; i++)
	    	{
	        	do
	        	{
		            printf("Ingrese la clave materia %d: ", i + 1);
		            scanf("%s", p->clavesMaterias[i]);
		        } while (!validarMateria(p->clavesMaterias[i]));
		}

	    	printf("Profesor agregado correctamente. Desea agregar otro profesor? (s/n): \n");
		scanf(" %c", &continuar);
	} while (continuar == 's' || continuar == 'S');
}


void ingresarGrupos(struct Grupos *gp)
{
	int i;
	do 
	{
		printf("\nIngresa la clave del grupo: ");
		scanf("%d", &gp->claveGrupo);
		if (gp->claveGrupo < 0)
			printf("Ingrese una clave mayor a 0");
	}while(gp->claveGrupo < 0);
				
	do 
	{	
		printf("\nIngresa el semestre del grupo: ");
		scanf("%d", &gp->semestre);
		if (gp->semestre < 0 || gp->semestre > 10)
			printf("Ingrese un semestre mayor a 0 y menor a 10");
		
	}while(gp->semestre < 0 || gp->semestre > 10);
				
	do 
	{
		printf("\nIngresa la clave de la materia: ");
		fflush(stdin);
		scanf("%s", &gp->claveMateria);
				
		if (strlen(gp->claveMateria) == 0) 
        	printf("La clave no puede estar vacío. Intente de nuevo.\n");
		
	}while (strlen(gp->claveMateria) == 0);
			
	do 
	{
		printf("\nIngresa el numero de empleado: ");
		fflush(stdin);
		scanf("%s", &gp->numEmpleado);
		if (strlen(gp->numEmpleado) == 0) 
        	printf("El numero de empleado no puede estar vacio. Intente de nuevo.\n");
		
	}while (strlen(gp->numEmpleado) == 0);
	
	time_t t = time(NULL);
	struct tm fechaActual = *localtime(&t);
	do
	{
		printf("Ingrese su fecha de grupo:\n");
		printf("Dia: ");
		scanf("%d", &gp->fh->dia);
		printf("Mes: ");
		scanf("%d", &gp->fh->mes);
		printf("Anio: ");
		scanf("%d", &gp->fh->anio);
		
		if( gp->fh->dia > fechaActual.tm_mday || gp->fh->mes > fechaActual.tm_mon + 1 || gp->fh->anio > fechaActual.tm_year + 1900)
			printf("La fecha ingresada es mayor que la fecha actual. Intente nuevamente.\n");
		
	}while (gp->fh->dia < fechaActual.tm_mday && gp->fh->mes < fechaActual.tm_mon + 1 && gp->fh->anio < fechaActual.tm_year + 1900);
	
	/*Falta periodo asi como validar claveMateria y numEmpleado con sus estructuras
	respectivas*/
}
